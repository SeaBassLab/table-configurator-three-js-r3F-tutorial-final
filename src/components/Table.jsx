/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import React, { useEffect } from "react";
import { useConfigurator } from "../contexts/Configurator";
import { useThree, useFrame } from "@react-three/fiber";
import * as THREE from "three";

export function Table(props) {
  const { nodes, materials } = useGLTF("./models/Table.gltf");
  const { setObjSelected, objSelected } = useConfigurator();
  const { pointer } = useThree();

  useFrame(() => {
    if (objSelected) {
      const mousePoint = objSelected.userData.rotated
        ? pointer.x * -1
        : pointer.x;
      if (objSelected.userData.left) {
        const x = (mousePoint - 1) * -1;
        if (x <= 1.5 && x >= 1) objSelected.position.x = x;
      }
      if (objSelected.userData.right) {
        const x = -(mousePoint + 1);
        if (x >= -1.5 && x <= -1) objSelected.position.x = x;
      }
    }
  });

  const { legs, legsColor } = useConfigurator();

  useEffect(() => {
    materials.Metal.color = new THREE.Color(legsColor);
  }, [legsColor]);

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Plate.geometry}
        material={materials.Plate}
        castShadow
      />
      {legs === 0 && (
        <>
          <mesh
            castShadow
            geometry={nodes.Legs01Left.geometry}
            material={materials.Metal}
            position={[-1.5, 0, 0]}
            onPointerDown={(event) => {
              event.eventObject.userData.right = true;
              event.eventObject.userData.rotated = event.point.z > 0;
              setObjSelected(event.eventObject);
            }}
            onPointerMissed={() => {
              setObjSelected(null);
            }}
          />
          <mesh
            geometry={nodes.Legs01Right.geometry}
            material={materials.Metal}
            position={[1.5, 0, 0]}
            castShadow
            onPointerDown={(event) => {
              event.eventObject.userData.left = true;
              event.eventObject.userData.rotated = event.point.z > 0;
              setObjSelected(event.eventObject);
            }}
            onPointerMissed={() => {
              setObjSelected(null);
            }}
          />
        </>
      )}
      {legs === 1 && (
        <>
          <mesh
            geometry={nodes.Legs02Left.geometry}
            material={materials.Metal}
            position={[-1.5, 0, 0]}
            castShadow
            onPointerDown={(event) => {
              event.eventObject.userData.right = true;
              event.eventObject.userData.rotated = event.point.z > 0;
              setObjSelected(event.eventObject);
            }}
            onPointerMissed={() => {
              setObjSelected(null);
            }}
          />
          <mesh
            geometry={nodes.Legs02Right.geometry}
            material={materials.Metal}
            position={[1.5, 0, 0]}
            castShadow
            onPointerDown={(event) => {
              event.eventObject.userData.left = true;
              event.eventObject.userData.rotated = event.point.z > 0;
              setObjSelected(event.eventObject);
            }}
            onPointerMissed={() => {
              setObjSelected(null);
            }}
          />
        </>
      )}
      {legs === 2 && (
        <>
          <mesh
            geometry={nodes.Legs03Left.geometry}
            material={materials.Metal}
            position={[-1.5, 0, 0]}
            castShadow
            onPointerDown={(event) => {
              event.eventObject.userData.right = true;
              event.eventObject.userData.rotated = event.point.z > 0;
              setObjSelected(event.eventObject);
            }}
            onPointerMissed={() => {
              setObjSelected(null);
            }}
          />
          <mesh
            geometry={nodes.Legs03Right.geometry}
            material={materials.Metal}
            position={[1.5, 0, 0]}
            castShadow
            onPointerDown={(event) => {
              event.eventObject.userData.left = true;
              event.eventObject.userData.rotated = event.point.z > 0;
              setObjSelected(event.eventObject);
            }}
            onPointerMissed={() => {
              setObjSelected(null);
            }}
          />
        </>
      )}
    </group>
  );
}

useGLTF.preload("./models/Table.gltf");
